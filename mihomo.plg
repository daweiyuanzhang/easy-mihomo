<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name      "easy-mihomo">
<!ENTITY author    "隔壁小王">
<!ENTITY version   "1.0.2">
<!ENTITY launch    "Settings/EasyMihomo.Main">
<!ENTITY sourceDir "/boot/config/plugins/easy-mihomo">
<!ENTITY pluginURL "https://raw.githubusercontent.com/wlaosj/easy-mihomo/refs/heads/main/mihomo.plg">
<!ENTITY plgPATH   "/boot/config/plugins/&name;">
<!ENTITY plgNAME   "&name;-&version;-x86_64">
<!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.12.0" support="https://t.me/+7jcTMePlNVwwZjg1" icon="icon-network">

<CHANGES>
1.0.2  功能与体验更新
- 修复：配置编辑器保存不生效（提前初始化已选配置并在保存时防御性回读）
- 优化：启动时统一标准化关键配置项（external-ui-url/name、external-ui、external-controller、secret），自动覆写或追加以提升兼容性
- 清理：移除重复 external-ui 覆写，合并为一次备份+统一 upsert
- 体验：在“打开控制台”后新增主机/端口/密码行内提示（主机自动取当前内网IP，端口9090，密码yyds666）
- 新增：仪表板显示模块（自动5秒刷新状态/版本/配置/内存/运行时间，含快捷操作）

1.0.1  日志管理增强版
- 新增自动日志清理功能
- 支持定期清理（每天凌晨2点）
- 智能保留最近1000行日志
- 添加日志状态监控显示
- 新增手动智能清理按钮
- 优化日志文件大小管理
- 改进配置选择体验，支持自动保存
- 新增弹出式配置编辑器，提供更大编辑空间
- 优化界面布局，操作按钮更合理
- 改进下载进度显示，支持自动消失提示
- 更新核心版本到 v1.19.15

1.0.0  初始版本发布
- 支持基本的代理功能
- 集成 Web 管理界面
- 支持开机自启动
- 支持多配置文件管理
- 支持在线编辑配置
</CHANGES>

<!-- pre-install: ensure clean run dir -->
<FILE Run="/bin/bash">
<INLINE>
set -e
rm -rf /usr/local/emhttp/plugins/easy-mihomo
mkdir -p /usr/local/emhttp/plugins/easy-mihomo/scripts
mkdir -p /boot/config/plugins/easy-mihomo
</INLINE>
</FILE>

<!-- copy files from source directory -->
<FILE Run="/bin/bash">
<INLINE><![CDATA[
set -e
# 从源目录复制所有文件
echo "正在创建目录结构..."

# 停止正在运行的mihomo服务
echo "正在停止mihomo服务..."
if pgrep -x mihomo >/dev/null 2>&1; then
  pkill -x mihomo 2>/dev/null || true
  sleep 2
  echo "  ✓ mihomo服务已停止"
else
  echo "  ✓ mihomo服务未运行"
fi

# 从GitHub下载并安装文件
echo "跳过自动下载核心与UI：将由插件页面提供手动下载/更新入口"

# 创建定期日志清理脚本
echo "  - 正在创建日志清理脚本..."
cat > "/usr/local/emhttp/plugins/easy-mihomo/scripts/log_cleanup.sh" << 'EOF'
#!/bin/bash
# Mihomo 日志定期清理脚本
LOG_FILE="/var/log/mihomo.log"
MAX_SIZE="10MB"  # 最大日志大小
KEEP_LINES=1000  # 保留行数

# 检查日志文件是否存在
if [ ! -f "$LOG_FILE" ]; then
    exit 0
fi

# 获取文件大小（字节）
FILE_SIZE=$(stat -c%s "$LOG_FILE" 2>/dev/null || echo 0)

# 解析最大大小
case "$MAX_SIZE" in
    *MB) MAX_BYTES=$((${MAX_SIZE%MB} * 1024 * 1024)) ;;
    *KB) MAX_BYTES=$((${MAX_SIZE%KB} * 1024)) ;;
    *) MAX_BYTES=10485760 ;; # 默认10MB
esac

# 如果文件超过大小限制，进行清理
if [ "$FILE_SIZE" -gt "$MAX_BYTES" ]; then
    echo "[$(date)] 日志文件过大 (${FILE_SIZE} bytes)，开始清理..." >> "$LOG_FILE"
    # 保留最后KEEP_LINES行
    tail -n "$KEEP_LINES" "$LOG_FILE" > "${LOG_FILE}.tmp" && mv "${LOG_FILE}.tmp" "$LOG_FILE"
    echo "[$(date)] 日志清理完成，保留最近 $KEEP_LINES 行" >> "$LOG_FILE"
fi
EOF

chmod +x "/usr/local/emhttp/plugins/easy-mihomo/scripts/log_cleanup.sh"
echo "  ✓ 日志清理脚本已创建"

# 创建仪表板JavaScript文件
echo "  - 正在创建仪表板JavaScript文件..."
cat > "/usr/local/emhttp/plugins/easy-mihomo/scripts/mihomo-dashboard.js" << 'EOF'
/*
  MIT License

  Copyright (c) 2024 Easy-Mihomo

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

/**
 * Mihomo Dashboard JavaScript Functions
 * 提供仪表板实时数据更新功能
 */

// 全局变量
let mihomoDashboardInterval = null;
let mihomoLastUpdate = 0;

/**
 * 刷新mihomo仪表板数据
 */
function refreshMihomoDashboard() {
    const now = Date.now();
    
    // 防止过于频繁的请求（最小间隔1秒）
    if (now - mihomoLastUpdate < 1000) {
        return;
    }
    
    mihomoLastUpdate = now;
    
    $.getJSON('/plugins/easy-mihomo/api.php?cmd=dashboard_status')
        .done(function(data) {
            updateMihomoDashboard(data);
        })
        .fail(function(xhr, status, error) {
            console.error('Failed to fetch mihomo dashboard data:', error);
            showMihomoError();
        });
}

/**
 * 更新仪表板显示
 * @param {Object} data - 从API获取的数据
 */
function updateMihomoDashboard(data) {
    if (!data) {
        showMihomoError();
        return;
    }
    
    // 更新状态显示
    updateMihomoStatus(data);
    
    // 更新版本信息
    updateMihomoVersion(data);
    
    // 更新服务状态
    updateMihomoService(data);
    
    // 更新配置信息
    updateMihomoConfig(data);
    
    // 更新内存使用信息
    updateMihomoMemory(data);
    
    // 更新运行时间信息
    updateMihomoUptime(data);
}

/**
 * 更新mihomo运行状态
 * @param {Object} data - 数据对象
 */
function updateMihomoStatus(data) {
    const statusIcon = $('.mihomo-status-icon');
    const statusText = $('.mihomo-status-text');
    
    // 移除所有状态类
    statusIcon.removeClass('running stopped loading');
    
    if (data.running) {
        statusIcon.addClass('running');
        statusText.text(_('运行中'));
    } else {
        statusIcon.addClass('stopped');
        statusText.text(_('已停止'));
    }
}

/**
 * 更新版本信息
 * @param {Object} data - 数据对象
 */
function updateMihomoVersion(data) {
    const versionText = $('#mihomo-version');
    const version = data.version || _('未知');
    versionText.text(_('版本: ') + version);
}

/**
 * 更新服务状态
 * @param {Object} data - 数据对象
 */
function updateMihomoService(data) {
    const serviceStatus = $('.mihomo-service-status');
    
    if (data.running) {
        serviceStatus.html('<span style="color:#28a745;font-weight:bold;">' + _('运行中') + '</span>');
    } else {
        serviceStatus.html('<span style="color:#dc3545;font-weight:bold;">' + _('已停止') + '</span>');
    }
}

/**
 * 更新配置信息
 * @param {Object} data - 数据对象
 */
function updateMihomoConfig(data) {
    const configInfo = $('.mihomo-config-info');
    
    if (data.config && data.config.has_config) {
        const configName = data.config.selected_config || _('未知');
        configInfo.html('<span style="color:#28a745;">' + configName + '</span>');
    } else {
        configInfo.html('<span style="color:#dc3545;">' + _('未选择配置') + '</span>');
    }
}

/**
 * 更新内存使用信息
 * @param {Object} data - 数据对象
 */
function updateMihomoMemory(data) {
    const memoryInfo = $('.mihomo-memory-info');
    
    if (data.running && data.memory) {
        memoryInfo.html('<span style="color:#17a2b8;">' + data.memory + '</span>');
    } else {
        memoryInfo.html('<span style="color:#6c757d;">' + _('未知') + '</span>');
    }
}

/**
 * 更新运行时间信息
 * @param {Object} data - 数据对象
 */
function updateMihomoUptime(data) {
    const uptimeInfo = $('.mihomo-uptime-info');
    
    if (data.running && data.uptime) {
        uptimeInfo.html('<span style="color:#28a745;">' + data.uptime + '</span>');
    } else {
        uptimeInfo.html('<span style="color:#6c757d;">' + _('未知') + '</span>');
    }
}

/**
 * 显示错误状态
 */
function showMihomoError() {
    $('.mihomo-status-icon').removeClass('running stopped').addClass('loading');
    $('.mihomo-status-text').text(_('状态: 错误'));
    $('.mihomo-service-status').text(_('错误'));
    $('.mihomo-config-info').text(_('错误'));
    $('.mihomo-memory-info').text(_('错误'));
    $('.mihomo-uptime-info').text(_('错误'));
}

/**
 * 启动自动刷新
 * @param {number} interval - 刷新间隔（毫秒）
 */
function startMihomoDashboardRefresh(interval = 5000) {
    // 清除现有定时器
    if (mihomoDashboardInterval) {
        clearInterval(mihomoDashboardInterval);
    }
    
    // 立即执行一次
    refreshMihomoDashboard();
    
    // 设置定时刷新
    mihomoDashboardInterval = setInterval(refreshMihomoDashboard, interval);
}

/**
 * 停止自动刷新
 */
function stopMihomoDashboardRefresh() {
    if (mihomoDashboardInterval) {
        clearInterval(mihomoDashboardInterval);
        mihomoDashboardInterval = null;
    }
}

/**
 * 手动刷新仪表板
 */
function manualRefreshMihomoDashboard() {
    refreshMihomoDashboard();
}

// 页面加载完成后自动启动
$(document).ready(function() {
    // 检查是否在仪表板页面
    if ($('#tblMihomoDash').length > 0) {
        startMihomoDashboardRefresh(5000);
    }
});

// 页面卸载时清理定时器
$(window).on('beforeunload', function() {
    stopMihomoDashboardRefresh();
});
EOF

chmod +x "/usr/local/emhttp/plugins/easy-mihomo/scripts/mihomo-dashboard.js"
echo "  ✓ 仪表板JavaScript文件已创建"

# 添加定时任务（每天凌晨2点清理）
echo "  - 正在设置定时清理任务..."
# 移除旧的定时任务
crontab -l 2>/dev/null | grep -v "mihomo.*log_cleanup" | crontab - 2>/dev/null || true
# 添加新的定时任务
(crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/emhttp/plugins/easy-mihomo/scripts/log_cleanup.sh >/dev/null 2>&1") | crontab - 2>/dev/null || true
echo "  ✓ 定时清理任务已设置（每天凌晨2点）"

# 安装阶段完成（核心/UI 下载改为页面手动触发）
echo "✓ 插件基础文件部署完成（未自动下载核心与UI）"
]]></INLINE>
</FILE>

<!-- WebUI index -->
<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/index.php">
<INLINE><![CDATA[
<?php
$baseRun = '/usr/local/emhttp/plugins/easy-mihomo';
$scripts = $baseRun . '/scripts';
$logFile = '/var/log/mihomo.log';
$confDir = '/boot/config/plugins/easy-mihomo';
$selectFile = $confDir . '/selected.conf';

// 提前读取当前选择的配置，供后续命令处理（如 saveconf）使用
$selectedName = is_file($selectFile) ? trim(@file_get_contents($selectFile)) : '';
$selectedPath = ($selectedName && is_file($confDir . '/' . $selectedName)) ? ($confDir . '/' . $selectedName) : '';

// 进度文件目录
$progressDir = '/var/tmp/easy-mihomo-progress';
@mkdir($progressDir, 0777, true);

$cmd = isset($_POST['cmd']) ? $_POST['cmd'] : (isset($_GET['cmd']) ? $_GET['cmd'] : '');
$msg = '';

// 先处理命令，再读取配置状态

// 早期拦截：进度轮询，直接输出文本并退出
if ($cmd === 'get_progress') {
  $target = $_GET['target'] ?? $_POST['target'] ?? '';
  $file = '';
  if ($target === 'core') $file = $progressDir . '/core.status';
  if ($target === 'ui')   $file = $progressDir . '/ui.status';
  header('Content-Type: text/plain; charset=utf-8');
  if ($file && is_file($file)) {
    echo @file_get_contents($file);
  }
  exit;
}
if ($cmd === 'start') {
  $out = shell_exec("bash $scripts/start.sh 2>&1");
  $msg = htmlspecialchars($out ?? '');
}
if ($cmd === 'stop') {
  $out = shell_exec("bash $scripts/stop.sh 2>&1");
  $msg = htmlspecialchars($out ?? '');
}
if ($cmd === 'restart') {
  $out = shell_exec("bash $scripts/restart.sh 2>&1");
  $msg = htmlspecialchars($out ?? '');
}
if ($cmd === 'clearlog') {
  @file_put_contents($logFile, "");
  $msg = '日志已清空';
}
if ($cmd === 'cleanup_log') {
  $out = shell_exec("bash $scripts/log_cleanup.sh 2>&1");
  $msg = '日志清理完成: ' . htmlspecialchars($out ?? '');
}
if ($cmd === 'start_download') {
  $target = $_GET['target'] ?? $_POST['target'] ?? '';
  if ($target === 'core') {
    @unlink($progressDir . '/core.status');
    $out = shell_exec("nohup bash $scripts/download_core.sh --progress >$progressDir/core.log 2>&1 & echo $!");
    $msg = '核心下载任务已启动 PID: ' . htmlspecialchars(trim($out));
  } elseif ($target === 'ui') {
    @unlink($progressDir . '/ui.status');
    $out = shell_exec("nohup bash $scripts/download_ui.sh --progress >$progressDir/ui.log 2>&1 & echo $!");
    $msg = 'UI 下载任务已启动 PID: ' . htmlspecialchars(trim($out));
  } else {
    $msg = '未知的下载目标';
  }
  // 若为异步请求（ajax=1），仅返回纯文本并退出，避免整页HTML回填到消息区域
  if ((isset($_GET['ajax']) && $_GET['ajax'] === '1') || (isset($_POST['ajax']) && $_POST['ajax'] === '1')) {
    header('Content-Type: text/plain; charset=utf-8');
    echo $msg;
    exit;
  }
}
if ($cmd === 'select_conf') {
  $name = basename($_POST['name'] ?? '');
  if ($name === '' || !preg_match('/\.(ya?ml)$/i', $name)) {
    $msg = '无效的选择';
  } else {
    $path = $confDir . '/' . $name;
    if (is_file($path)) {
      if (@file_put_contents($selectFile, $name) !== false) {
        $msg = '已选择配置：' . htmlspecialchars($name);
      } else {
        $msg = '保存选择失败';
      }
    } else {
      $msg = '文件不存在';
    }
  }
}
// 上传功能已移除，请手动上传配置文件到插件目录
$maxSize = 1024*1024; // 1MB
if ($cmd === 'saveconf') {
  $content = $_POST['content'] ?? '';
  if ($content === '') {
    $msg = '内容为空';
  } else if (strlen($content) > $maxSize) {
    $msg = '内容过大（>1MB）';
  } else {
    // 防御性：若上方未读取到，命令阶段再次解析一次
    if (!$selectedPath) {
      $selectedNameCmd = is_file($selectFile) ? trim(@file_get_contents($selectFile)) : '';
      $selectedPath = ($selectedNameCmd && is_file($confDir . '/' . $selectedNameCmd)) ? ($confDir . '/' . $selectedNameCmd) : '';
    }
    if (!$selectedPath) {
      $msg = '未选择配置，请先在页面中选择';
    } else {
      if (!is_dir(dirname($selectedPath))) @mkdir(dirname($selectedPath), 0777, true);
      if (@file_put_contents($selectedPath, $content) !== false) {
        $msg = '配置已保存：' . htmlspecialchars($selectedPath);
        $shouldRestart = isset($_POST['restart']) && $_POST['restart'] === '1';
        if ($shouldRestart) {
          $out = shell_exec("bash $scripts/restart.sh 2>&1");
          $msg .= '，并已重启服务';
          if (!empty($out)) $msg .= ': ' . htmlspecialchars($out);
        }
      } else {
        $msg = '保存失败';
      }
    }
  }
}
$status = shell_exec("bash $scripts/status.sh 2>&1");
$version = shell_exec("bash $scripts/version.sh 2>&1");
$logTail = file_exists($logFile) ? trim(shell_exec("tail -n 200 $logFile 2>&1")) : '';

// 获取日志文件信息
$logSize = file_exists($logFile) ? filesize($logFile) : 0;
$logSizeFormatted = formatBytes($logSize);
$logLines = file_exists($logFile) ? count(file($logFile)) : 0;

function formatBytes($size, $precision = 2) {
    $units = array('B', 'KB', 'MB', 'GB', 'TB');
    for ($i = 0; $size > 1024 && $i < count($units) - 1; $i++) {
        $size /= 1024;
    }
    return round($size, $precision) . ' ' . $units[$i];
}

// 处理上传重定向返回的消息
if (isset($_GET['uploadmsg']) && $_GET['uploadmsg'] !== '') {
  $msg = $_GET['uploadmsg'];
}
// 仅在输出 HTML 前设置内容类型，避免影响上传重定向
header('Content-Type: text/html; charset=utf-8');

$available = array_values(array_filter(scandir($confDir) ?: [], function($f) use ($confDir){
  return is_file($confDir . '/' . $f) && preg_match('/\.(ya?ml)$/i', $f);
}));

// 开机即启动（不依赖阵列）设置
$bootFlag = '/boot/config/plugins/easy-mihomo/bootstart.enabled';
if ($cmd === 'set_bootstart') {
  $enable = ($_POST['enable'] ?? '') === '1';
  $goPath = '/boot/config/go';
  $begin = "# BEGIN easy-mihomo (do not edit)";
  $end   = "# END easy-mihomo";
  $block = $begin . "\n" .
    "(\n" .
    "cat <<'EOF' >/tmp/easy-mihomo-boot.sh\n" .
    "#!/bin/bash\n" .
    "FLAG=\"/boot/config/plugins/easy-mihomo/bootstart.enabled\"\n" .
    "START_SH=\"/usr/local/emhttp/plugins/easy-mihomo/scripts/start.sh\"\n" .
    "LOG=\"/var/log/mihomo.log\"\n" .
    "for i in \$(seq 1 60); do\n" .
    "  if [ -x \"\$START_SH\" ]; then break; fi\n" .
    "  sleep 1\n" .
    "done\n" .
    "if [ -f \"\$FLAG\" ] && [ -x \"\$START_SH\" ]; then\n" .
    "  echo \"[easy-mihomo] boot detected, starting service...\" >> \"\$LOG\" 2>&1\n" .
    "  bash \"\$START_SH\" >> \"\$LOG\" 2>&1 || true\n" .
    "fi\n" .
    "rm -f /tmp/easy-mihomo-boot.sh\n" .
    "EOF\n" .
    "bash /tmp/easy-mihomo-boot.sh &\n" .
    ")\n" .
    $end . "\n";

  if ($enable) {
    if (!is_dir(dirname($bootFlag))) @mkdir(dirname($bootFlag), 0777, true);
    @file_put_contents($bootFlag, 'enabled');
    $go = file_exists($goPath) ? @file_get_contents($goPath) : "";
    if (strpos($go, $begin) !== false && strpos($go, $end) !== false) {
      $pattern = sprintf('/%s[\s\S]*?%s\n?/m', preg_quote($begin, '/'), preg_quote($end, '/'));
      $go = preg_replace($pattern, $block, $go, 1);
    } else {
      if ($go !== "" && substr($go, -1) !== "\n") $go .= "\n";
      $go .= $block;
    }
    @file_put_contents($goPath, $go);
    $msg = 'bootstart enabled (go injected)';
  } else {
    @unlink($bootFlag);
    $go = file_exists($goPath) ? @file_get_contents($goPath) : "";
    if ($go !== "") {
      $pattern = sprintf('/%s[\s\S]*?%s\n?/m', preg_quote($begin, '/'), preg_quote($end, '/'));
      $newGo = preg_replace($pattern, '', $go, 1);
      if ($newGo !== null) @file_put_contents($goPath, $newGo);
    }
    $msg = 'bootstart disabled (go cleaned)';
  }
}
$bootstartOn = file_exists($bootFlag);

// 现在读取已选择的配置（在所有命令处理完成后）
$selectedName = is_file($selectFile) ? trim(@file_get_contents($selectFile)) : '';
$selectedPath = ($selectedName && is_file($confDir . '/' . $selectedName)) ? ($confDir . '/' . $selectedName) : '';

// 读取配置内容用于编辑
$confText = ($selectedPath && file_exists($selectedPath)) ? @file_get_contents($selectedPath) : '';

// 检查安装状态
$installStatus = '';
$binExists = file_exists('/usr/local/bin/mihomo');
$binUdiskExists = file_exists('/boot/config/plugins/easy-mihomo/mihomo');
$uiExists = file_exists('/boot/config/plugins/easy-mihomo/zashboard.zip');

// 检查插件目录下是否有任何配置文件
$confDir = '/boot/config/plugins/easy-mihomo';
$confExists = false;
if (is_dir($confDir)) {
  $files = scandir($confDir);
  foreach ($files as $file) {
    if (preg_match('/\.(ya?ml)$/i', $file)) {
      $confExists = true;
      break;
    }
  }
}

// 只检查核心组件，配置文件由用户自己上传
if (!$binExists) {
  $installStatus = '<div class="error">❌ 缺少二进制文件，请点击上方“下载/更新核心”按钮安装</div>';
} elseif (!$uiExists) {
  $installStatus = '<div class="warning">⚠️ 未检测到 UI 压缩包，请点击上方“下载/更新UI”获取（不影响按配置自定义 external-ui）</div>';
} elseif (!$confExists) {
  $installStatus = '<div class="success">💡 尚未发现配置文件，请上传到插件目录，或使用下方“打开文件管理器”</div>';
}
?>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>Easy-Mihomo</title>
<style>
body{font-family:Arial,Helvetica,sans-serif;margin:16px;color:#222}
.card{border:1px solid #ddd;border-radius:8px;padding:16px;margin-bottom:16px}
pre{background:#f7f7f7;border:1px solid #eee;border-radius:6px;padding:10px;max-height:360px;overflow:auto}
button{padding:8px 14px;margin-right:8px;cursor:pointer}
input[type=file]{margin-top:8px;margin-bottom:8px}
.warning{background:#fff3cd;border:1px solid #ffeaa7;color:#856404;padding:12px;border-radius:6px;margin-bottom:16px}
.error{color:#dc3545;margin:4px 0;font-size:14px}
.success{color:#28a745;margin:4px 0;font-size:14px}
</style>
<script>
function executeAction(action) {
  // 使用GET参数直接跳转
  var url = new URL(window.location);
  url.searchParams.set('cmd', action);
  window.location.href = url.toString();
}

function openConsole() {
  // 获取当前页面的主机名（不包含端口）
  var currentHostname = window.location.hostname;
  var consoleUrl = 'http://' + currentHostname + ':9090/ui/zashboard/#/proxies';
  // 在新标签页中打开控制台
  window.open(consoleUrl, '_blank');
}

function openFileManager() {
  // 获取当前页面的主机名和端口
  var currentHostname = window.location.hostname;
  var currentPort = window.location.port;
  // 构建文件管理器URL，直接定位到插件配置目录
  var fileManagerUrl = 'http://' + currentHostname + ':' + currentPort + '/Main/Browse?dir=%2Fboot%2Fconfig%2Fplugins%2Feasy-mihomo';
  // 在新标签页中打开文件管理器
  window.open(fileManagerUrl, '_blank');
}

function startDownload(target, btn) {
  try {
    if (btn) {
      btn.dataset.oldText = btn.innerText;
      btn.disabled = true;
      btn.innerText = '下载中...';
    }
    var box = document.getElementById('download-msg');
    if (box) box.innerText = '已发起下载任务，正在准备...';
  } catch (e) {}
  var xhr = new XMLHttpRequest();
  xhr.open('GET', '/plugins/easy-mihomo/api.php?cmd=start_download&target=' + encodeURIComponent(target));
  xhr.onload = function(){
    if (xhr.status === 200) {
      var box = document.getElementById('download-msg');
      if (box) box.innerText = (xhr.responseText || '').trim() || '任务已启动';
    }
    try { if (btn) { btn.disabled = false; btn.innerText = btn.dataset.oldText || btn.innerText; } } catch (e) {}
  };
  xhr.onerror = function(){ try { if (btn) { btn.disabled = false; btn.innerText = btn.dataset.oldText || btn.innerText; } } catch(e){} };
  xhr.send();
}

function pollProgress(target, elId) {
  function tick(){
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '/plugins/easy-mihomo/api.php?cmd=get_progress&target=' + encodeURIComponent(target));
    xhr.onload = function(){
      if (xhr.status === 200) {
        var box = document.getElementById(elId);
        var txt = xhr.responseText || '';
        if (txt.trim()) {
          box.innerText = txt;
        } else {
          // 进度文件已被清理，视为完成
          if (box.innerText && box.innerText.trim() !== '') {
            box.innerText = '✅ 下载完成';
            setTimeout(function(){ box.innerText=''; }, 3000);
          }
        }
      }
    };
    xhr.send();
  }
  tick();
  return setInterval(tick, 2000);
}

function openConfigEditor() {
  document.getElementById('configModal').style.display = 'block';
  // 禁用页面滚动
  document.body.style.overflow = 'hidden';
}

function closeConfigEditor() {
  document.getElementById('configModal').style.display = 'none';
  // 恢复页面滚动
  document.body.style.overflow = 'auto';
}

// 点击背景关闭弹出窗口
document.addEventListener('click', function(event) {
  var modal = document.getElementById('configModal');
  if (event.target === modal) {
    closeConfigEditor();
  }
});

// ESC键关闭弹出窗口
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    closeConfigEditor();
  }
});

// 使用浏览器原生表单提交，确保 emhttp 正常接收带 Content-Length 的上传
</script>
</head>
<body>
<h2>Mihomo 管理</h2>
<?php if ($installStatus) { echo $installStatus; } ?>
<div class="card">
  <div>
    <b>运行状态：</b>
    <?php
      $statusText = trim($status ?? 'unknown');
      if (strpos($statusText, 'running') !== false) {
        $pid = '';
        if (preg_match('/pid=(\d+)/', $statusText, $matches)) { $pid = ' (进程ID: ' . $matches[1] . ')'; }
        echo '<span style="color:#28a745;font-weight:bold;">🟢 运行中' . $pid . '</span>';
      } elseif (strpos($statusText, 'stopped') !== false) {
        echo '<span style="color:#dc3545;font-weight:bold;">🔴 已停止</span>';
      } else {
        echo '<span style="color:#6c757d;">⚪ ' . htmlspecialchars($statusText) . '</span>';
      }
    ?>
  </div>

  <div style="margin-top:8px">
    <b>核心：</b>
    <?php if ($binExists): ?>
      <span style="color:#28a745">已安装</span> | <button onclick="startDownload('core', this)">下载/更新核心</button> | 版本：<?= htmlspecialchars(trim($version ?? 'unknown')) ?>
    <?php elseif ($binUdiskExists): ?>
      <span style="color:#ffc107">已保存</span>（重启后自动恢复） | <button onclick="startDownload('core', this)">下载/更新核心</button>
    <?php else: ?>
      <span style="color:#dc3545">未安装</span> | <button onclick="startDownload('core', this)">下载/更新核心</button>
    <?php endif; ?>
    <div id="progress-core" style="font-size:12px;color:#6c757d;margin-top:4px"></div>
  </div>

  <div style="margin-top:6px">
    <b>UI：</b>
    <?php if ($uiExists): ?>
      <span style="color:#28a745">已安装</span>
    <?php else: ?>
      <span style="color:#dc3545">未安装</span>
    <?php endif; ?>
    | <button onclick="startDownload('ui', this)">下载/更新UI</button>
    | <button onclick="openConsole()">打开控制台</button>
    <span style="margin-left:8px;color:#6c757d;white-space:nowrap;">
      主机：<span id="zash-host">-</span>
      | 端口：<span>9090</span>
      | 密码：<span>yyds666</span>
    </span>
    <div id="progress-ui" style="font-size:12px;color:#6c757d;margin-top:4px"></div>
  </div>

  <div style="margin-top:6px">
    <b>配置：</b>
     <form id="configForm" method="POST" style="display:inline-block;margin:0 8px;vertical-align:middle">
       <input type="hidden" name="cmd" value="select_conf" />
       <select name="name" onchange="this.form.submit()" style="min-width:260px">
         <?php if (!$selectedName): ?>
           <option value="" disabled selected>请选择配置文件</option>
         <?php endif; ?>
         <?php foreach ($available as $f): ?>
           <option value="<?= htmlspecialchars($f) ?>" <?= ($f === $selectedName ? 'selected' : '') ?>><?= htmlspecialchars($f) ?></option>
         <?php endforeach; ?>
       </select>
     </form>
     <button onclick="document.getElementById('configForm').submit()">刷新配置列表</button>
     | <button onclick="openFileManager()">打开配置文件夹</button>
     | <span style="color:#6c757d">当前：<?= $selectedPath ? htmlspecialchars($selectedPath) : '未选择' ?></span>
  </div>

  <div style="margin-top:8px">
    <b>日志：</b> 文件大小: <?= $logSizeFormatted ?> | 总行数: <?= $logLines ?> 行 | 自动清理: 每天凌晨2点
    <button onclick="openLogViewer()" style="margin-left:8px;background:#17a2b8;color:white;border:none;padding:4px 8px;border-radius:3px;cursor:pointer;">
      <i class="fa fa-eye"></i> 查看日志
    </button>
  </div>

  <div style="margin-top:10px">
    <button onclick="executeAction('start')">启动</button>
    <button onclick="executeAction('stop')">停止</button>
    <button onclick="executeAction('restart')">重启服务</button>
    <button onclick="executeAction('clearlog')">清空日志</button>
    <button onclick="executeAction('cleanup_log')" style="background:#ffc107;color:#000;">智能清理</button>
  </div>

  <div style="margin-top:8px">
    <b>开机启动：</b>
    <form method="POST" style="display:inline-block;margin:0 8px;vertical-align:middle">
      <input type="hidden" name="cmd" value="set_bootstart" />
      <label>
        <input type="checkbox" name="enable" value="1" <?= $bootstartOn ? 'checked' : '' ?> onchange="this.form.submit()" />
        开机自动启动 Mihomo
      </label>
    </form>
    <span style="color:#6c757d">
      <?= $bootstartOn ? '✅ 已启用' : '❌ 未启用' ?>
    </span>
  </div>
</div>
<!-- 在线编辑配置按钮 -->
<div class="card">
  <div><b>配置编辑：</b>
    <button onclick="openConfigEditor()" <?= $selectedPath? '':'disabled' ?> style="margin-left:8px">
      <?= $selectedPath? '编辑配置 (' . htmlspecialchars($selectedName) . ')':'请先选择配置文件' ?>
    </button>
  </div>
</div>

<!-- 配置编辑弹出窗口 -->
<div id="configModal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:1000;overflow:auto;box-sizing:border-box;">
  <div style="position:relative;margin:8% auto 5% auto;background:white;border-radius:8px;padding:20px;width:90%;max-width:1200px;min-height:600px;box-shadow:0 4px 20px rgba(0,0,0,0.3);box-sizing:border-box;">
    <div style="margin-bottom:15px;border-bottom:1px solid #eee;padding-bottom:10px;">
      <h3 style="margin:0;">编辑配置: <?= htmlspecialchars($selectedName) ?></h3>
    </div>
    <form method="POST" style="display:flex;flex-direction:column;">
      <input type="hidden" name="cmd" value="saveconf" />
      <div style="margin-bottom:15px;">
        <textarea name="content" style="width:100%;height:500px;font-family:monospace;font-size:14px;border:1px solid #ddd;border-radius:4px;padding:10px;resize:vertical;box-sizing:border-box;" spellcheck="false" <?= $selectedPath? '':'disabled' ?>><?php echo htmlspecialchars($confText); ?></textarea>
      </div>
      <div style="display:flex;justify-content:space-between;align-items:center;border-top:1px solid #eee;padding-top:15px;">
        <label><input type="checkbox" name="restart" value="1" <?= $selectedPath? '':'disabled' ?> /> 保存后重启服务</label>
        <div>
          <button type="button" onclick="closeConfigEditor()" style="margin-right:10px;padding:8px 16px;border:1px solid #ddd;background:white;border-radius:4px;cursor:pointer;">取消</button>
          <button type="submit" <?= $selectedPath? '':'disabled' ?> style="padding:8px 16px;background:#007bff;color:white;border:none;border-radius:4px;cursor:pointer;">保存配置</button>
        </div>
      </div>
    </form>
    <small style="color:#6c757d;margin-top:10px;display:block;"><?= $selectedPath? '保存将直接覆盖所选配置（上限 1MB）。':'尚未选择配置文件。' ?></small>
  </div>
</div>

<!-- 日志查看器弹出窗口 -->
<div id="logModal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:1000;overflow:auto;box-sizing:border-box;">
  <div style="position:relative;margin:5% auto 5% auto;background:white;border-radius:8px;padding:20px;width:90%;max-width:1200px;min-height:600px;box-shadow:0 4px 20px rgba(0,0,0,0.3);box-sizing:border-box;">
    <div style="margin-bottom:15px;border-bottom:1px solid #eee;padding-bottom:10px;">
      <h3 style="margin:0;">Mihomo 日志查看器</h3>
      <div style="margin-top:8px;color:#6c757d;font-size:14px;">
        文件大小: <?= $logSizeFormatted ?> | 总行数: <?= $logLines ?> 行 | 显示最近 200 行
      </div>
    </div>
    <div style="margin-bottom:15px;">
      <div style="display:flex;gap:10px;margin-bottom:10px;">
        <button onclick="refreshLogViewer()" style="padding:6px 12px;background:#007bff;color:white;border:none;border-radius:4px;cursor:pointer;">
          <i class="fa fa-refresh"></i> 刷新日志
        </button>
        <button onclick="executeLogAction('clearlog')" style="padding:6px 12px;background:#dc3545;color:white;border:none;border-radius:4px;cursor:pointer;">
          <i class="fa fa-trash"></i> 清空日志
        </button>
        <button onclick="executeLogAction('cleanup_log')" style="padding:6px 12px;background:#ffc107;color:#000;border:none;border-radius:4px;cursor:pointer;">
          <i class="fa fa-magic"></i> 智能清理
        </button>
      </div>
      <div style="border:1px solid #ddd;border-radius:4px;background:#f8f9fa;max-height:500px;overflow:auto;">
        <pre id="logContent" style="margin:0;padding:15px;font-family:monospace;font-size:12px;line-height:1.4;white-space:pre-wrap;word-wrap:break-word;"><?= htmlspecialchars($logTail) ?></pre>
      </div>
    </div>
    <div style="display:flex;justify-content:space-between;align-items:center;border-top:1px solid #eee;padding-top:15px;">
      <div style="color:#6c757d;font-size:12px;">
        自动清理: 每天凌晨2点 | 最大保留: 1000行
      </div>
      <button onclick="closeLogViewer()" style="padding:8px 16px;border:1px solid #ddd;background:white;border-radius:4px;cursor:pointer;">关闭</button>
    </div>
  </div>
</div>

<div id="download-msg" style="font-size:12px;color:#6c757d;margin-top:6px"></div>
<script>
// 页面加载后开始轮询进度
pollProgress('core', 'progress-core');
pollProgress('ui', 'progress-ui');

// 填充 Zashboard 访问信息（主机/端口/密码）
document.addEventListener('DOMContentLoaded', function() {
  var elHost = document.getElementById('zash-host');
  if (elHost) {
    elHost.textContent = window.location.hostname || '-';
  }
});

// 日志查看器功能
function openLogViewer() {
  document.getElementById('logModal').style.display = 'block';
  // 自动滚动到底部显示最新日志
  setTimeout(function() {
    var logContent = document.getElementById('logContent');
    logContent.scrollTop = logContent.scrollHeight;
  }, 100);
}

function closeLogViewer() {
  document.getElementById('logModal').style.display = 'none';
}

function refreshLogViewer() {
  // 显示加载状态
  var logContent = document.getElementById('logContent');
  var originalContent = logContent.innerHTML;
  logContent.innerHTML = '<span style="color:#6c757d;">正在刷新日志...</span>';
  
  // 刷新页面以获取最新日志
  setTimeout(function() {
    window.location.reload();
  }, 500);
}

function executeLogAction(action) {
  var actionText = '';
  switch(action) {
    case 'clearlog': actionText = '清空日志'; break;
    case 'cleanup_log': actionText = '智能清理'; break;
  }
  
  if (confirm('确定要' + actionText + '吗？')) {
    // 显示加载状态
    var logContent = document.getElementById('logContent');
    logContent.innerHTML = '<span style="color:#6c757d;">正在' + actionText + '...</span>';
    
    // 执行操作
    var url = new URL(window.location);
    url.searchParams.set('cmd', action);
    
    fetch(url.toString())
      .then(function(response) {
        return response.text();
      })
      .then(function(data) {
        // 操作完成后刷新日志
        setTimeout(function() {
          window.location.reload();
        }, 1000);
      })
      .catch(function(error) {
        logContent.innerHTML = '<span style="color:#dc3545;">操作失败: ' + error + '</span>';
      });
  }
}

// 点击模态框外部关闭
window.onclick = function(event) {
  var logModal = document.getElementById('logModal');
  if (event.target == logModal) {
    closeLogViewer();
  }
}

// ESC键关闭模态框
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    closeLogViewer();
  }
});
</script>
</body>
</html>
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/api.php">
<INLINE><![CDATA[
<?php
// 轻量 API：纯文本返回，避免 emhttp 外层 HTML 包装
header('Content-Type: text/plain; charset=utf-8');

$baseRun = '/usr/local/emhttp/plugins/easy-mihomo';
$scripts = $baseRun . '/scripts';
$progressDir = '/var/tmp/easy-mihomo-progress';
@mkdir($progressDir, 0777, true);

$cmd = $_GET['cmd'] ?? $_POST['cmd'] ?? '';
if ($cmd === 'get_progress') {
  $target = $_GET['target'] ?? $_POST['target'] ?? '';
  $file = '';
  if ($target === 'core') $file = $progressDir . '/core.status';
  if ($target === 'ui')   $file = $progressDir . '/ui.status';
  if ($file && is_file($file)) { echo @file_get_contents($file); }
  exit;
}
if ($cmd === 'start_download') {
  $target = $_GET['target'] ?? $_POST['target'] ?? '';
  if ($target === 'core') {
    @unlink($progressDir . '/core.status');
    $out = shell_exec("nohup bash $scripts/download_core.sh --progress >$progressDir/core.log 2>&1 & echo $!");
    echo '核心下载任务已启动 PID: ' . trim($out);
  } elseif ($target === 'ui') {
    @unlink($progressDir . '/ui.status');
    $out = shell_exec("nohup bash $scripts/download_ui.sh --progress >$progressDir/ui.log 2>&1 & echo $!");
    echo 'UI 下载任务已启动 PID: ' . trim($out);
  } else {
    echo '未知的下载目标';
  }
  exit;
}
if ($cmd === 'dashboard_status') {
  // 返回JSON格式的仪表板数据
  header('Content-Type: application/json; charset=utf-8');
  
  // 获取mihomo状态
  $status = shell_exec("bash $scripts/status.sh 2>&1");
  $version = shell_exec("bash $scripts/version.sh 2>&1");
  
  $isRunning = strpos($status, 'running') !== false;
  $pid = '';
  if (preg_match('/pid=(\d+)/', $status, $matches)) {
    $pid = $matches[1];
  }
  
  // 获取内存使用信息
  $memoryUsage = '0 MB';
  if ($pid) {
    $memoryInfo = shell_exec("ps -o rss= -p $pid 2>/dev/null");
    if ($memoryInfo) {
      $memoryKB = intval(trim($memoryInfo));
      $memoryMB = round($memoryKB / 1024, 1);
      $memoryUsage = $memoryMB . ' MB';
    }
  }
  
  // 获取运行时间信息
  $uptime = '未知';
  if ($pid) {
    $startTime = shell_exec("ps -o lstart= -p $pid 2>/dev/null");
    if ($startTime) {
      $startTimestamp = strtotime(trim($startTime));
      if ($startTimestamp) {
        $currentTime = time();
        $diff = $currentTime - $startTimestamp;
        
        $hours = floor($diff / 3600);
        $minutes = floor(($diff % 3600) / 60);
        
        if ($hours > 0) {
          $uptime = $hours . 'h' . $minutes . 'm';
        } else {
          $uptime = $minutes . 'm';
        }
      }
    }
  }
  
  // 获取配置信息
  $confDir = '/boot/config/plugins/easy-mihomo';
  $selectFile = $confDir . '/selected.conf';
  $selectedName = is_file($selectFile) ? trim(@file_get_contents($selectFile)) : '';
  $selectedPath = ($selectedName && is_file($confDir . '/' . $selectedName)) ? ($confDir . '/' . $selectedName) : '';
  
  $result = [
    'running' => $isRunning,
    'status' => trim($status),
    'version' => trim($version),
    'pid' => $pid,
    'memory' => $memoryUsage,
    'uptime' => $uptime,
    'config' => [
      'selected_config' => $selectedName,
      'config_path' => $selectedPath,
      'has_config' => !empty($selectedPath)
    ]
  ];
  
  echo json_encode($result);
  exit;
}
if ($cmd === 'start') {
  $out = shell_exec("bash $scripts/start.sh 2>&1");
  echo htmlspecialchars($out ?? '');
  exit;
}
if ($cmd === 'stop') {
  $out = shell_exec("bash $scripts/stop.sh 2>&1");
  echo htmlspecialchars($out ?? '');
  exit;
}
if ($cmd === 'restart') {
  $out = shell_exec("bash $scripts/restart.sh 2>&1");
  echo htmlspecialchars($out ?? '');
  exit;
}
echo 'unknown command';
]]></INLINE>
</FILE>

<!-- scripts -->
<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/start.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e
BIN="/usr/local/bin/mihomo"
CONF_DIR="/boot/config/plugins/easy-mihomo"
SELECT_FILE="$CONF_DIR/selected.conf"
if [ -f "$SELECT_FILE" ]; then
  NAME=$(cat "$SELECT_FILE" 2>/dev/null || true)
  if [ -n "$NAME" ] && [ -f "$CONF_DIR/$NAME" ]; then
    CONF_FILE="$CONF_DIR/$NAME"
  else
    echo "未找到有效的已选配置 ("$NAME")" >&2; exit 1
  fi
else
  echo "未选择配置，请先在页面中选择" >&2; exit 1
fi
LOG_FILE="/var/log/mihomo.log"
PID_FILE="/var/run/mihomo.pid"

# 防重复启动检查（必须在最前面）
if [ -f "$PID_FILE" ]; then
  PID=$(cat "$PID_FILE" 2>/dev/null || true)
  if [ -n "$PID" ] && ps -p "$PID" >/dev/null 2>&1; then
    echo "running (pid $PID)"
    exit 0
  fi
fi

# 检查并恢复核心文件（重启后内存文件丢失）
if [ ! -f "$BIN" ]; then
  UDISK_BIN="/boot/config/plugins/easy-mihomo/mihomo"
  if [ -f "$UDISK_BIN" ]; then
    echo "检测到核心文件缺失，从U盘恢复..." >> "$LOG_FILE" 2>&1
    mkdir -p /usr/local/bin
    cp -f "$UDISK_BIN" "$BIN"
    chmod +x "$BIN"
    echo "核心文件已从U盘恢复到内存" >> "$LOG_FILE" 2>&1
  else
    echo "二进制缺失: $BIN" >> "$LOG_FILE" 2>&1
    echo "二进制缺失: $BIN"
    exit 1
  fi
fi

# UI 运行于内存，直接修改配置文件路径指向内存目录
UI_ZIP_PATH="/boot/config/plugins/easy-mihomo/zashboard.zip"
UI_RAM_DIR="/var/tmp/easy-mihomo-ui/zashboard"

# 每次启动都重新解压UI到内存（确保最新）
if [ -f "$UI_ZIP_PATH" ]; then
  echo "解压 UI 到内存（覆盖）..." >> "$LOG_FILE" 2>&1
  rm -rf "$UI_RAM_DIR" && mkdir -p "$UI_RAM_DIR"
  if command -v unzip >/dev/null 2>&1; then
    unzip -oq "$UI_ZIP_PATH" -d "$UI_RAM_DIR" >> "$LOG_FILE" 2>&1 || true
  elif command -v busybox >/dev/null 2>&1; then
    busybox unzip -oq "$UI_ZIP_PATH" -d "$UI_RAM_DIR" >> "$LOG_FILE" 2>&1 || true
  fi
  # 若有 dist/ 子目录，上移其内容并删除
  if [ -d "$UI_RAM_DIR/dist" ]; then
    cp -rf "$UI_RAM_DIR/dist/." "$UI_RAM_DIR/" 2>>"$LOG_FILE" || true
    rm -rf "$UI_RAM_DIR/dist" 2>>"$LOG_FILE" || true
  fi
  echo "UI 解压完成" >> "$LOG_FILE" 2>&1
else
  echo "UI zip文件不存在，跳过解压" >> "$LOG_FILE" 2>&1
fi

# 在mihomo工作目录内创建bind mount指向内存UI目录
UI_MOUNT_DIR="/boot/config/plugins/easy-mihomo/ui/zashboard"
echo "创建UI bind mount..." >> "$LOG_FILE" 2>&1

# 确保目标目录存在
mkdir -p "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true

# 如果已经挂载，先卸载
if mountpoint -q "$UI_MOUNT_DIR" 2>/dev/null; then
  echo "卸载现有bind mount: $UI_MOUNT_DIR" >> "$LOG_FILE" 2>&1
  umount "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || umount -l "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true
fi

# 清理目录内容（如果存在）
if [ -d "$UI_MOUNT_DIR" ] && [ ! -L "$UI_MOUNT_DIR" ]; then
  echo "清理目录内容: $UI_MOUNT_DIR" >> "$LOG_FILE" 2>&1
  rm -rf "$UI_MOUNT_DIR"/* 2>>"$LOG_FILE" || true
fi

# 创建bind mount
echo "创建bind mount: $UI_MOUNT_DIR <- $UI_RAM_DIR" >> "$LOG_FILE" 2>&1
mount --bind "$UI_RAM_DIR" "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || {
  echo "bind mount创建失败，尝试清理后重试..." >> "$LOG_FILE" 2>&1
  # 如果失败，清理目录后重试
  rm -rf "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true
  mkdir -p "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true
  mount --bind "$UI_RAM_DIR" "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true
}

# 验证bind mount是否成功
if mountpoint -q "$UI_MOUNT_DIR" 2>/dev/null; then
  echo "bind mount创建成功" >> "$LOG_FILE" 2>&1
else
  echo "bind mount创建失败，使用软链接作为备选方案..." >> "$LOG_FILE" 2>&1
  rm -rf "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true
  ln -s "$UI_RAM_DIR" "$UI_MOUNT_DIR" 2>>"$LOG_FILE" || true
fi

# 检查并修复配置文件中的UI路径
if [ -f "$CONF_FILE" ]; then
  # 进行标准化处理前，备份一次配置（仅保留单个备份文件）
  cp "$CONF_FILE" "$CONF_FILE.bak" 2>/dev/null || true

  # 统一覆写关键UI/控制器字段，保障兼容
  DESIRED_UI_URL="https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip"
  DESIRED_UI_NAME="zashboard"
  DESIRED_UI_PATH="ui"
  DESIRED_CONTROLLER="0.0.0.0:9090"
  DESIRED_SECRET="yyds666"

  upsert_yaml_key(){
    local key="$1"; shift
    local val="$1"; shift
    # 转义 / 和 &，避免 sed 替换冲突
    local esc_val
    esc_val=$(printf '%s' "$val" | sed 's/[&\/]/\\&/g')
    if grep -qE "^${key}:" "$CONF_FILE"; then
      sed -i "s|^${key}:.*|${key}: ${esc_val}|g" "$CONF_FILE"
    else
      echo "${key}: ${val}" >> "$CONF_FILE"
    fi
  }

  echo "标准化 external-ui-url / external-ui-name / external-controller / secret..." >> "$LOG_FILE" 2>&1
  upsert_yaml_key "external-ui-url" "$DESIRED_UI_URL"
  upsert_yaml_key "external-ui-name" "$DESIRED_UI_NAME"
  upsert_yaml_key "external-ui" "$DESIRED_UI_PATH"
  upsert_yaml_key "external-controller" "$DESIRED_CONTROLLER"
  upsert_yaml_key "secret" "$DESIRED_SECRET"
else
  echo "配置文件不存在，跳过UI路径检查" >> "$LOG_FILE" 2>&1
fi

if [ ! -x "$BIN" ]; then echo "二进制缺失: $BIN" >&2; exit 1; fi
if [ ! -f "$CONF_FILE" ]; then echo "配置文件缺失: $CONF_FILE" >&2; exit 1; fi

# 尝试加载 TUN（忽略失败）
modprobe tun 2>/dev/null || true

# 后台启动
nohup "$BIN" -d "$CONF_DIR" -f "$CONF_FILE" >> "$LOG_FILE" 2>&1 &
NEWPID=$!
echo $NEWPID > "$PID_FILE"
sleep 1

if ps -p "$NEWPID" >/dev/null 2>&1; then
  echo "started (pid $NEWPID)"
  exit 0
else
  echo "start failed, see $LOG_FILE" >&2
  exit 1
fi
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/stop.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e
PID_FILE="/var/run/mihomo.pid"

# 优先按 pidfile 停止
if [ -f "$PID_FILE" ]; then
  PID=$(cat "$PID_FILE" 2>/dev/null || true)
  if [ -n "$PID" ] && ps -p "$PID" >/dev/null 2>&1; then
    kill "$PID" 2>/dev/null || true
  fi
fi

# 兜底按进程名停止
if pgrep -x mihomo >/dev/null 2>&1; then
  # 等待优雅退出
  for i in $(seq 1 5); do
    if pgrep -x mihomo >/dev/null 2>&1; then
      sleep 1
    else
      break
    fi
  done
  # 仍存活则强杀
  if pgrep -x mihomo >/dev/null 2>&1; then
    pkill -9 -x mihomo 2>/dev/null || true
  fi
fi

# 清理UI bind mount或软链接
UI_MOUNT_DIR="/boot/config/plugins/easy-mihomo/ui/zashboard"
if mountpoint -q "$UI_MOUNT_DIR" 2>/dev/null; then
  echo "卸载bind mount: $UI_MOUNT_DIR" >&2
  umount "$UI_MOUNT_DIR" 2>/dev/null || umount -l "$UI_MOUNT_DIR" 2>/dev/null || true
elif [ -L "$UI_MOUNT_DIR" ]; then
  echo "清理软链接: $UI_MOUNT_DIR" >&2
  rm -f "$UI_MOUNT_DIR" 2>/dev/null || true
elif [ -d "$UI_MOUNT_DIR" ]; then
  echo "清理目录: $UI_MOUNT_DIR" >&2
  rm -rf "$UI_MOUNT_DIR" 2>/dev/null || true
fi

# 清理 pidfile（若进程已不存在）
if [ -f "$PID_FILE" ]; then
  if ! ps -p $(cat "$PID_FILE" 2>/dev/null || echo 0) >/dev/null 2>&1; then
    rm -f "$PID_FILE"
  fi
fi

echo "stopped"
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/restart.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e
SCRIPT_DIR="/usr/local/emhttp/plugins/easy-mihomo/scripts"

bash "$SCRIPT_DIR/stop.sh" || true
sleep 1
bash "$SCRIPT_DIR/start.sh"
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/status.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e
PID_FILE="/var/run/mihomo.pid"
STATUS="stopped"; PID=""
if pgrep -x mihomo >/dev/null 2>&1; then STATUS="running"; PID=$(pgrep -x mihomo | head -n1); fi
echo "status=$STATUS pid=$PID"
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/version.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e
BIN="/usr/local/bin/mihomo"
if [ -f "$BIN" ]; then 
  # 在vfat文件系统上，直接尝试执行
  "$BIN" -v 2>&1 | head -n 1 || echo "binary exists but cannot execute"
else 
  echo "binary missing"
fi
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/download_core.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e

PROGRESS=0
if [ "$1" = "--progress" ]; then PROGRESS=1; fi

DOWNLOAD_DIR="/tmp/mihomo-download"
GITHUB_BASE="https://raw.githubusercontent.com/wlaosj/easy-mihomo/main"
CORE_GZ="mihomo.gz"
TMP_BIN="/tmp/mihomo-latest"
STATUS_DIR="/var/tmp/easy-mihomo-progress"
STATUS_FILE="$STATUS_DIR/core.status"
mkdir -p "$STATUS_DIR"

write_status(){
  echo "$1"
  if [ "$PROGRESS" = "1" ]; then echo "$1" > "$STATUS_FILE"; fi
}

trap 'write_status "error: unexpected failure"' ERR

mkdir -p "$DOWNLOAD_DIR"
write_status "10%: 准备下载核心..."
if wget -q "$GITHUB_BASE/$CORE_GZ" -O "$DOWNLOAD_DIR/$CORE_GZ"; then
  write_status "60%: 下载完成，正在解压..."
else
  write_status "error: 下载失败"; exit 1
fi

if gunzip -c "$DOWNLOAD_DIR/$CORE_GZ" > "$TMP_BIN" 2>/dev/null; then
  chmod +x "$TMP_BIN"
else
  write_status "error: 解压失败"; rm -f "$TMP_BIN"; exit 1
fi

write_status "90%: 正在安装核心..."
mkdir -p /usr/local/bin
mkdir -p /boot/config/plugins/easy-mihomo

# 双重存储：U盘持久化 + 内存系统PATH
cp -f "$TMP_BIN" /boot/config/plugins/easy-mihomo/mihomo
cp -f "$TMP_BIN" /usr/local/bin/mihomo
chmod +x /boot/config/plugins/easy-mihomo/mihomo
chmod +x /usr/local/bin/mihomo

rm -f "$TMP_BIN"
rm -rf "$DOWNLOAD_DIR"
write_status "100%: 核心安装完成（已保存到U盘和内存）"
( sleep 1; rm -f "$STATUS_FILE" ) >/dev/null 2>&1 &
]]></INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/scripts/download_ui.sh" Mode="0755">
<INLINE><![CDATA[
#!/bin/bash
set -e

PROGRESS=0
if [ "$1" = "--progress" ]; then PROGRESS=1; fi

UI_URL="https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip"
UI_ROOT="/boot/config/plugins/easy-mihomo"
ZIP_PATH="$UI_ROOT/zashboard.zip"
RAM_ROOT="/var/tmp/easy-mihomo-ui"
RAM_DIR="$RAM_ROOT/zashboard"
STATUS_DIR="/var/tmp/easy-mihomo-progress"
STATUS_FILE="$STATUS_DIR/ui.status"
TMP_DIR="/tmp/easy-mihomo-ui"
ZIP_FILE="$TMP_DIR/dist.zip"

mkdir -p "$STATUS_DIR" "$TMP_DIR" "$UI_ROOT" "$RAM_DIR"

write_status(){
  echo "$1"
  if [ "$PROGRESS" = "1" ]; then echo "$1" > "$STATUS_FILE"; fi
}

trap 'write_status "error: unexpected failure"' ERR

write_status "10%: 正在下载 UI 包..."
if ! wget -qO "$ZIP_FILE" --tries=3 --waitretry=1 --connect-timeout=5 --read-timeout=30 "$UI_URL"; then
  write_status "error: 下载失败"; rm -rf "$TMP_DIR"; exit 1
fi

write_status "60%: 正在保存到U盘..."
# 单次顺序写入到 U 盘，减少随机写
mv -f "$ZIP_FILE" "$ZIP_PATH"

write_status "90%: 正在解压到内存..."
# 在内存目录中解压（覆盖现有）
rm -rf "$RAM_DIR" && mkdir -p "$RAM_DIR"
if command -v unzip >/dev/null 2>&1; then
  unzip -oq "$ZIP_PATH" -d "$RAM_DIR"
elif command -v busybox >/dev/null 2>&1; then
  busybox unzip -oq "$ZIP_PATH" -d "$RAM_DIR"
else
  write_status "error: 系统缺少 unzip/busybox"; rm -rf "$TMP_DIR"; exit 1
fi
# 规范化：如果解压后存在 dist/ 子目录，移动其内容到根并删除 dist/
if [ -d "$RAM_DIR/dist" ]; then
  cp -rf "$RAM_DIR/dist/." "$RAM_DIR/"
  rm -rf "$RAM_DIR/dist"
fi

rm -rf "$TMP_DIR"
write_status "100%: UI 已保存到U盘并解压到内存"
( sleep 1; rm -f "$STATUS_FILE" ) >/dev/null 2>&1 &
]]></INLINE>
</FILE>

<!-- Main page content -->
<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/EasyMihomo.Main.page">
<INLINE><![CDATA[
Menu="Utilities"
Type="xmenu"
Title="Easy-Mihomo"
Icon="icon-network"
Tabs="false"
---
<?php
include '/usr/local/emhttp/plugins/easy-mihomo/index.php';
?>
]]></INLINE>
</FILE>

<!-- Dashboard page content -->
<FILE Name="/usr/local/emhttp/plugins/easy-mihomo/EasyMihomo.Dashboard.page">
<INLINE><![CDATA[
Menu="Dashboard:0"
Icon="icon-network"
---
<?php
/*
  MIT License

  Copyright (c) 2024 Easy-Mihomo

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/

require_once('/usr/local/emhttp/plugins/dynamix/include/Wrappers.php');
$pluginname = "easy-mihomo";

// 获取mihomo状态
function getMihomoStatus() {
    $status = shell_exec("bash /usr/local/emhttp/plugins/easy-mihomo/scripts/status.sh 2>&1");
    $version = shell_exec("bash /usr/local/emhttp/plugins/easy-mihomo/scripts/version.sh 2>&1");
    
    $isRunning = strpos($status, 'running') !== false;
    $pid = '';
    if (preg_match('/pid=(\d+)/', $status, $matches)) {
        $pid = $matches[1];
    }
    
    return [
        'running' => $isRunning,
        'status' => trim($status),
        'version' => trim($version),
        'pid' => $pid
    ];
}

// 获取配置信息
function getMihomoConfig() {
    $confDir = '/boot/config/plugins/easy-mihomo';
    $selectFile = $confDir . '/selected.conf';
    $selectedName = is_file($selectFile) ? trim(@file_get_contents($selectFile)) : '';
    $selectedPath = ($selectedName && is_file($confDir . '/' . $selectedName)) ? ($confDir . '/' . $selectedName) : '';
    
    return [
        'selected_config' => $selectedName,
        'config_path' => $selectedPath,
        'has_config' => !empty($selectedPath)
    ];
}

// 获取日志信息
function getMihomoLogInfo() {
    $logFile = '/var/log/mihomo.log';
    $logSize = file_exists($logFile) ? filesize($logFile) : 0;
    $logLines = file_exists($logFile) ? count(file($logFile)) : 0;
    
    function formatBytes($size, $precision = 2) {
        $units = array('B', 'KB', 'MB', 'GB', 'TB');
        for ($i = 0; $size > 1024 && $i < count($units) - 1; $i++) {
            $size /= 1024;
        }
        return round($size, $precision) . ' ' . $units[$i];
    }
    
    return [
        'size' => formatBytes($logSize),
        'lines' => $logLines,
        'exists' => file_exists($logFile)
    ];
}

$mihomoStatus = getMihomoStatus();
$mihomoConfig = getMihomoConfig();
$logInfo = getMihomoLogInfo();

// 创建仪表板瓦片
$mytiles[$pluginname]['column1'] =
<<<EOT
<tbody id="tblMihomoDash" title="_(Mihomo 代理状态)_">
<tr>
    <td>
        <span class='tile-header'>
        <span class='tile-header-left'>
            <i class='icon-network f32'></i>
            <div class='section'>
                <span class='mihomo-status'>
                    <i class='fa fa-circle mihomo-status-icon'></i>
                    <span class='mihomo-status-text'>_(状态: 加载中...)_</span>
                </span>
                <span class='mihomo-version' id='mihomo-version'>_(版本: 加载中...)_</span>
            </div>
        </span>
        <span class='tile-header-right'>
            <span class='tile-header-right-controls'>
            <a href="/Settings/EasyMihomo.Main" title="_(前往 Mihomo 设置)_">
                <i class="fa fa-fw fa-cog control"></i>
            </a>
            </span>
        </span>
        </span>
    </td>
</tr>
<tr class="header"><td><span class="w25">_(运行状态)_</span><span class="w25">_(配置文件)_</span><span class="w25">_(内存使用)_</span><span class="w25">_(运行时间)_</span></td></tr>
<tr class="updated">
    <td>
        <span class="w25">
            <span class="mihomo-service-status">_(加载中...)_</span>
        </span>
        <span class="w25">
            <span class="mihomo-config-info">_(加载中...)_</span>
        </span>
        <span class="w25">
            <span class="mihomo-memory-info">_(加载中...)_</span>
        </span>
        <span class="w25">
            <span class="mihomo-uptime-info">_(加载中...)_</span>
        </span>
    </td>
</tr>
<tr class="updated">
    <td>
        <span class="w25">
            <button class="mihomo-btn mihomo-btn-start" onclick="mihomoAction('start')" title="_(启动 Mihomo 服务)_">
                <i class="fa fa-play"></i> _(启动)_
            </button>
        </span>
        <span class="w25">
            <button class="mihomo-btn mihomo-btn-restart" onclick="mihomoAction('restart')" title="_(重启 Mihomo 服务)_">
                <i class="fa fa-refresh"></i> _(重启)_
            </button>
        </span>
        <span class="w25">
            <button class="mihomo-btn mihomo-btn-stop" onclick="mihomoAction('stop')" title="_(停止 Mihomo 服务)_">
                <i class="fa fa-stop"></i> _(停止)_
            </button>
        </span>
        <span class="w25">
            <button class="mihomo-btn mihomo-btn-ui" onclick="mihomoAction('ui')" title="_(打开 Mihomo 管理界面)_">
                <i class="fa fa-external-link"></i> _(打开UI)_
            </button>
        </span>
    </td>
</tr>
<tr><td><span></span></td></tr>
</tbody>
EOT;

?>
<style type="text/css">
.mihomo-status {
    display: inline-block;
    margin-right: 10px;
}

.mihomo-status-icon {
    margin-right: 5px;
}

.mihomo-status-icon.running {
    color: #28a745;
}

.mihomo-status-icon.stopped {
    color: #dc3545;
}

.mihomo-status-icon.loading {
    color: #6c757d;
}

.mihomo-version {
    display: block;
    font-size: 12px;
    color: #6c757d;
    margin-top: 2px;
}

.mihomo-service-status {
    font-weight: bold;
}

.mihomo-config-info {
    font-size: 12px;
    color: #6c757d;
}

.mihomo-memory-info {
    font-size: 12px;
    color: #6c757d;
    font-weight: bold;
}

.mihomo-uptime-info {
    font-size: 12px;
    color: #6c757d;
    font-weight: bold;
}

/* 确保4列等宽对齐 */
.w25 {
    width: 25% !important;
    display: inline-block;
    text-align: center;
    vertical-align: top;
    box-sizing: border-box;
    padding: 0 2px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* 按钮样式 */
.mihomo-btn {
    background: #2c3e50;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    font-weight: bold;
    transition: all 0.3s ease;
    width: 100%;
    max-width: 80px;
    margin: 2px;
}

.mihomo-btn:hover {
    opacity: 0.8;
    transform: translateY(-1px);
}

.mihomo-btn:active {
    transform: translateY(0);
}

.mihomo-btn i {
    margin-right: 4px;
}

.mihomo-btn-start {
    background: #28a745;
}

.mihomo-btn-restart {
    background: #ffc107;
    color: #212529;
}

.mihomo-btn-stop {
    background: #dc3545;
}

.mihomo-btn-ui {
    background: #17a2b8;
}

</style>

<script type="text/javascript" src="/plugins/easy-mihomo/scripts/mihomo-dashboard.js"></script>
<script type="text/javascript">
function refreshMihomoDashboard() {
    $.getJSON('/plugins/easy-mihomo/api.php?cmd=dashboard_status', function(data) {
        if (data) {
            // 更新状态显示
            var statusIcon = $('.mihomo-status-icon');
            var statusText = $('.mihomo-status-text');
            var versionText = $('#mihomo-version');
            var serviceStatus = $('.mihomo-service-status');
            var configInfo = $('.mihomo-config-info');
            var memoryInfo = $('.mihomo-memory-info');
            var uptimeInfo = $('.mihomo-uptime-info');
            
            // 状态图标和文本
            statusIcon.removeClass('running stopped loading').addClass(data.running ? 'running' : 'stopped');
            statusText.text(data.running ? _('运行中') : _('已停止'));
            
            // 顶部版本信息
            versionText.text(_('版本: ') + (data.version || _('未知')));
            
            // 运行状态
            if (data.running) {
                serviceStatus.html('<span style="color:#28a745;font-weight:bold;">' + _('运行中') + '</span>');
            } else {
                serviceStatus.html('<span style="color:#dc3545;font-weight:bold;">' + _('已停止') + '</span>');
            }
            
            // 配置文件信息
            if (data.config && data.config.has_config) {
                var configName = data.config.selected_config || _('未知');
                configInfo.html('<span style="color:#28a745;">' + configName + '</span>');
            } else {
                configInfo.html('<span style="color:#dc3545;">' + _('未选择配置') + '</span>');
            }
            
            // 内存使用信息
            if (data.running && data.memory) {
                memoryInfo.html('<span style="color:#17a2b8;">' + data.memory + '</span>');
            } else {
                memoryInfo.html('<span style="color:#6c757d;">' + _('未知') + '</span>');
            }
            
            // 运行时间信息
            if (data.running && data.uptime) {
                uptimeInfo.html('<span style="color:#28a745;">' + data.uptime + '</span>');
            } else {
                uptimeInfo.html('<span style="color:#6c757d;">' + _('未知') + '</span>');
            }
        }
    }).fail(function() {
        // 更新失败时的显示
        $('.mihomo-status-icon').removeClass('running stopped').addClass('loading');
        $('.mihomo-status-text').text(_('状态: 错误'));
        $('.mihomo-service-status').text(_('错误'));
        $('.mihomo-config-info').text(_('错误'));
        $('.mihomo-memory-info').text(_('错误'));
        $('.mihomo-uptime-info').text(_('错误'));
    });
}

// 按钮操作函数
function mihomoAction(action) {
    switch(action) {
        case 'start':
        case 'stop':
        case 'restart':
            // 静默处理操作，不跳转页面
            var actionText = '';
            switch(action) {
                case 'start': actionText = _('启动'); break;
                case 'stop': actionText = _('停止'); break;
                case 'restart': actionText = _('重启'); break;
            }
            
            // 显示操作状态
            $('.mihomo-status-text').text(_('状态: ') + actionText + _('中...'));
            $('.mihomo-status-icon').removeClass('running stopped').addClass('loading');
            
            // 发送操作请求
            $.get('/plugins/easy-mihomo/api.php?cmd=' + action, function(response) {
                // 操作完成后刷新状态
                setTimeout(function() {
                    refreshMihomoDashboard();
                }, 1000);
            }).fail(function() {
                // 操作失败时显示错误
                $('.mihomo-status-text').text(_('状态: 操作失败'));
                $('.mihomo-status-icon').removeClass('running stopped loading').addClass('stopped');
            });
            break;
        case 'ui':
            // 打开控制台UI
            var currentHostname = window.location.hostname;
            var consoleUrl = 'http://' + currentHostname + ':9090/ui/zashboard/#/proxies';
            window.open(consoleUrl, '_blank');
            break;
    }
}

// 页面加载时立即刷新一次
$(document).ready(function() {
    refreshMihomoDashboard();
    
    // 每5秒刷新一次
    setInterval(refreshMihomoDashboard, 5000);
});
</script>
]]></INLINE>
</FILE>

<!-- post-install: setup menu entry -->
<FILE Run="/bin/bash">
<INLINE>
set -e
echo "Mihomo plugin installed. Persistent path: /boot/config/plugins/easy-mihomo"
</INLINE>
</FILE>

<!-- version cleanup -->
<FILE Run="/bin/bash">
<INLINE>
set -e
echo "Cleanup completed"
</INLINE>
</FILE>

<!-- remove -->
<FILE Run="/bin/bash" Method="remove">
<INLINE><![CDATA[
set -e
echo "正在卸载 Easy-Mihomo 插件..."

# 停止mihomo进程
echo "  - 正在停止 Mihomo 服务..."
if pgrep -x mihomo >/dev/null 2>&1; then
  echo "    检测到mihomo进程，正在停止..."
  pkill -9 -x mihomo 2>/dev/null || true
  # 等待进程完全停止
  sleep 2
  if pgrep -x mihomo >/dev/null 2>&1; then
    echo "    强制停止mihomo进程..."
    pkill -9 -x mihomo 2>/dev/null || true
    sleep 1
  fi
  echo "  ✓ Mihomo 服务已停止"
else
  echo "  ✓ Mihomo 服务未运行"
fi

# 卸载 UI bind 挂载（若存在）
echo "  - 卸载 UI 挂载..."
UI_MOUNT_DIR="/boot/config/plugins/easy-mihomo/ui/zashboard"
if [ -d "$UI_MOUNT_DIR" ] && mountpoint -q "$UI_MOUNT_DIR"; then
  echo "    检测到bind mount，正在卸载..."
  umount "$UI_MOUNT_DIR" 2>/dev/null || umount -l "$UI_MOUNT_DIR" 2>/dev/null || true
  echo "    bind mount已卸载"
elif [ -L "$UI_MOUNT_DIR" ]; then
  echo "    检测到软链接，正在删除..."
  rm -f "$UI_MOUNT_DIR" 2>/dev/null || true
  echo "    软链接已删除"
else
  echo "    无需处理UI挂载"
fi
echo "  ✓ UI 挂载处理完成"

# 清理PID文件
echo "  - 清理进程文件..."
rm -f /var/run/mihomo.pid
echo "  ✓ 进程文件已清理"

# 清理二进制文件
echo "  - 清理二进制文件..."
rm -f /usr/local/bin/mihomo
rm -f /boot/config/plugins/easy-mihomo/mihomo
echo "  ✓ 二进制文件已清理"

# 清理插件目录
echo "  - 清理插件目录..."
rm -rf /usr/local/emhttp/plugins/easy-mihomo
rm -rf /boot/config/plugins/easy-mihomo
echo "  ✓ 插件目录已清理"

# 清理内存临时目录
echo "  - 清理内存临时目录..."
rm -rf /var/tmp/easy-mihomo-ui /var/tmp/easy-mihomo-progress /tmp/easy-mihomo-ui /tmp/mihomo-download
echo "  ✓ 内存临时目录已清理"

# 清理系统覆盖层文件（仅限本插件命名空间）
echo "  - 清理系统文件..."
rm -rf /var/local/overlay/usr/local/emhttp/plugins/easy-mihomo
rm -f /var/local/overlay/usr/local/emhttp/plugins/easy-mihomo.*
echo "  ✓ 系统文件已清理"

# 清理日志文件
echo "  - 清理日志文件..."
rm -f /var/log/mihomo.log
echo "  ✓ 日志文件已清理"

# 清理临时文件
echo "  - 清理临时文件..."
rm -f /tmp/mihomo
echo "  ✓ 临时文件已清理"

# 清理开机即启动注入与标志
echo "  - 清理开机启动配置..."
sed -i "/^# BEGIN easy-mihomo (do not edit)$/,/^# END easy-mihomo$/d" /boot/config/go 2>/dev/null || true
rm -f /boot/config/plugins/easy-mihomo/bootstart.enabled
echo "  ✓ 开机启动配置已清理"

# 清理定时任务
echo "  - 清理定时清理任务..."
crontab -l 2>/dev/null | grep -v "mihomo.*log_cleanup" | crontab - 2>/dev/null || true
echo "  ✓ 定时清理任务已清理"

echo ""
echo "🎉 Easy-Mihomo 插件卸载完成！"
echo "   所有相关文件和配置已完全清理。"
]]></INLINE>
</FILE>

</PLUGIN>
